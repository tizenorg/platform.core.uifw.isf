<!DOCTYPE html>
<html>
<head>
<title>Tizen Remote Input</title>
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable = no">
<link rel="stylesheet" href="jquery.mobile-1.3.1.min.css" type="text/css"/>
<script src="ajaxCaller.js" type="text/javascript"> </script>
<script src="util.js" type="text/javascript"> </script>
<script src="jquery-2.0.2.min.js"></script>
<script src="jquery.mobile-1.3.1.min.js"></script>
</head>

<body>

<input type="button" value="Start" onclick="WebHelper.activate()" id="startBtn"/>

<input type="button" value="SendLOG" onclick="WebHelper.log()" id="logBtn"/>

<div id="debugconsole"></div>

<script>
 var startBtn = document.getElementById('startBtn'),
     debug = document.getElementById('debugconsole');
 

 var WebHelper = new function() {
     
     this.MessageTypes = {
         PLAIN:"plain",
         QUERY:"query",
         REPLY:"reply"
     };

     this.MessageCommands = {
         INIT:"init",
         EXIT:"exit",

         FOCUS_IN:"focus_in",
         FOCUS_OUT:"focus_out",
         SHOW:"show",
         HIDE:"hide",
         SET_ROTATION:"set_rotation",
         UPDATE_CURSOR_POSITION:"update_cursor_position",
         SET_LANGUAGE:"set_language",
         SET_IMDATA:"set_imdata",
         GET_IMDATA:"get_imdata",
         SET_RETURN_KEY_TYPE:"set_return_key_type",
         GET_RETURN_KEY_TYPE:"get_return_key_type",
         SET_RETURN_KEY_DISABLE:"set_return_key_disable",
         GET_RETURN_KEY_DISABLE:"get_return_key_disable",
         SET_LAYOUT:"set_layout",
         GET_LAYOUT:"get_layout",
         RESET_INPUT_CONTEXT:"reset_input_context",
         PROCESS_KEY_EVENT:"process_key_event",

         LOG:"log",
         COMMIT_STRING:"commit_string",
         UPDATE_PREEDIT_STRING:"update_preedit_string",
         SEND_KEY_EVENT:"send_key_event",
         SEND_MOUSE_KEY:"send_mouse_key",
         SEND_MOUSE_MOVE:"send_mouse_move",
         SEND_WHEEL_MOVE:"send_wheel_move",
         SEND_AIR_INPUT:"send_air_input",
         SEND_AIR_SETTING:"send_air_setting",
         FORWARD_KEY_EVENT:"forward_key_event",
         SET_KEYBOARD_SIZES:"set_keyboard_sizes",
         CONNECT:"connect"
     };
     
     this.connectWebSocket = function(pcol) {
         if (typeof MozWebSocket != "undefined") {
             this.socket =
                 new MozWebSocket(pcol, "keyboard-protocol");
         } else {
             this.socket =
                 new WebSocket(pcol, "keyboard-protocol");
         }
     };
     
     this.log = function() {
         if (this.socket !== "undefined") {
             debug.innerHTML += "<br>send log!";
             this.socket.send(
                 this.MessageTypes.REPLY + "|" +
                 this.MessageCommands.LOG + "|" +
                 "aa");
         } else {
             debug.innerHTML += "<br>fail to send log!";
             }
     };
     
     this.activate = function() {
         for (var num = 2; num < 255; num++) {
            var pcol = "ws://192.168.0." + num +":7172";
             //pcol = "ws://192.168.0.20"+":7172";
             debug.innerHTML += "<br>Try to find server IP!" + pcol;
             this.connectWebSocket(pcol);
             //this.registerHandlers(this);
                 this.log();

             try {
                 this.socket.onopen = function() {
                     this.send(
                     this.MessageTypes.PLAIN + "|" +
                     this.MessageCommands.CONNECT + "|" +
                     "websocket");
                 };
                 this.log();

                 this.socket.onmessage = function(msg) {
                     var items = msg.data.split("|");
                     handler.defaultHandler(items);
                     debug.innerHTML += "<br>Find server IP!" + items[1];
                     
                 };
                 this.socket.onerror = function(msg) {
                     debug.innerHTML += "<br>Error!" + msg;
                     
                 };
                 this.socket.onclose = function(evt) {
                     debug.innerHTML += "<br>Close socket!";
                     /* Try to reconnect if disconnected uncleanly */
                     if (evt.wasClean === false) {
                         /*
                         setTimeout((function(handler) {
                             alert("connecting again!");
                             this.connectWebSocket();
                             this.registerHandlers(this);
                         }).call(handler), 500);
                         */
                     }
                 };
                 this.log();
             } catch(exception) {
                 alert(exception);
             }
         }
     };
};

</script>
</body>
</html>


